并行适用的场景？

有大量的元素要处理
性能问题是首要考虑的
没有在一个多线程的环境中
所以如Java Web应用，底层都是Servlet，我们知道，Servlet是多线程的，所以在web应用中并行流并不适用，而对于数据的处理、算法的验证等单线程环境是适用的。

并行流底层其实是ForkJoinPool ，用的是分治法，即Fork/Join方法

当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线 程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。

相对于一般的线程池实现，fork/join框架的优势体现在对其中包含的任务的处理方式上，在一般的线程池中，如果一个线程正在执行的任务由于某些原因无法继续运行,那么该线程会处于等待状态。而在fork/join框架实现中，如果某个子问题由于等待另外一个子问题的完成而无法继续运行.那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行。这种方式减少了线程的等待时间，提高了性能。

如何高效使用并行流？

如果用循环还是顺序流或者是并行流，像我们上面那样测试一下；
注意装箱，尽量使用IntStream, LongStream，和DoubleStream来避免装箱拆箱;
有些操作在并行流上性能很差，比如limit，findFirst等依赖顺序的操作。unordered方法可以把有序流转为无序流，使用findAny等好很多，在无序流上用limit也好很多;
计算流水线操作总成本，处理单个元素用时越多，并行就越划算；
对于较小的数据量，用并行不一定是好事儿；
区分单线程和多线程，多线程下并行不一定是好事儿；
数据结果是否易于分解，比如ArrayList比LinkedList易于分解，range创建的原始流也易于分解；
终端操作中的合并大家是否很大，大了也不划算